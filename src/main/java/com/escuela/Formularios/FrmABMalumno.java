/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.escuela.Formularios;

import com.escuela.DAOs.DaoAlumno;
import com.escuela.DAOs.DaoCarrera;
import com.escuela.Entidades.Alumno;
import com.escuela.Utilidades.Conexion;
import com.escuela.Utilidades.Utilidades;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class FrmABMalumno extends javax.swing.JFrame {
        
    DaoAlumno daoAlumno;
    DaoCarrera daoCarrera;
    
    DefaultComboBoxModel<String> modeloComboBoxCarrera = new DefaultComboBoxModel<>();

    /**
     * Creates new form FrmABMalumno
     */
    public FrmABMalumno() {
        initComponents();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        comboBoxCarrera.setModel(modeloComboBoxCarrera);
        this.setResizable(false);
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDNI = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblApellido = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        lblMail = new javax.swing.JLabel();
        lblCarrera = new javax.swing.JLabel();
        txtDNI = new javax.swing.JTextField();
        txtNombreAlumno = new javax.swing.JTextField();
        txtApellidoAlumno = new javax.swing.JTextField();
        txtTelefonoAlumno = new javax.swing.JTextField();
        txtMailAlumno = new javax.swing.JTextField();
        comboBoxCarrera = new javax.swing.JComboBox<>();
        txtIdCarrera = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ABM - Alumnos");

        lblDNI.setText("DNI:");

        lblNombre.setText("Nombre:");

        lblApellido.setText("Apellido:");

        lblTelefono.setText("Telefono:");

        lblMail.setText("Mail:");

        lblCarrera.setText("Carrera:");

        comboBoxCarrera.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCarreraItemStateChanged(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblApellido)
                                .addComponent(lblTelefono))
                            .addGap(20, 20, 20)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtDNI)
                                .addComponent(txtNombreAlumno)
                                .addComponent(txtApellidoAlumno)
                                .addComponent(txtTelefonoAlumno)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblMail, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCarrera))
                            .addGap(35, 35, 35)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(txtIdCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtMailAlumno)
                                .addComponent(comboBoxCarrera, 0, 304, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAgregar)
                                .addGap(18, 18, 18)
                                .addComponent(btnModificar)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEliminar)
                                .addGap(48, 48, 48)
                                .addComponent(btnCancelar))
                            .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDNI)
                    .addComponent(txtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombreAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblApellido)
                    .addComponent(txtApellidoAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelefono)
                    .addComponent(txtTelefonoAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMail)
                    .addComponent(txtMailAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarrera)
                    .addComponent(comboBoxCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIdCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar)
                    .addComponent(btnCancelar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnBuscar))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inicializar() {
        
        Conexion con = new Conexion();
        
        daoAlumno = new DaoAlumno();
        daoCarrera = new DaoCarrera();
        
        try {
           
            txtDNI.setText("");
            txtNombreAlumno.setText("");
            txtApellidoAlumno.setText("");
            txtTelefonoAlumno.setText("");
            txtMailAlumno.setText("");
            txtIdCarrera.setText("");
        
            daoCarrera.llenarComboBoxCarrera(modeloComboBoxCarrera, con.getConexion());
            
            if (modeloComboBoxCarrera.getSize() > 0) {
                comboBoxCarrera.setSelectedIndex(0);
            }
                
            btnAgregar.setEnabled(true);
            btnEliminar.setEnabled(false);
            btnModificar.setEnabled(false);
            btnBuscar.setEnabled(true);
            btnCancelar.setEnabled(true);
        
            txtIdCarrera.setEditable(false);
            txtIdCarrera.setVisible(false);
           
        } catch (SQLException ex) {
            
            Utilidades.msg(this, "Se produjo un error al inicializar la ventana, ingrese nuevamente");
            this.dispose();
            
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexión, ingrese nuevamente");
                this.dispose();
                
            }
            
        }
           
    }
    
    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        
        Conexion con = new Conexion();
        
        String dato = JOptionPane.showInputDialog("DNI:");
            
        btnAgregar.setEnabled(false);
        btnCancelar.setEnabled(true);
        btnBuscar.setEnabled(false);
            
        btnEliminar.setEnabled(true);
        btnModificar.setEnabled(true);
        
        try {
           
            if (dato != null && !dato.equals("") && Utilidades.isNumInt(dato) && Integer.parseInt(dato) > 0) {
                
                Integer datoEntero = Integer.valueOf(dato);
                
                Alumno alumno = daoAlumno.obtenerDatosAlumno(datoEntero, con.getConexion());
                
                if (alumno != null) {
                    
                    txtDNI.setText(String.valueOf(alumno.getDniAlumno()));
                    txtDNI.setEditable(false);
                    txtNombreAlumno.setText(alumno.getNombreAlumno());
                    txtApellidoAlumno.setText(alumno.getApellidoAlumno());
                    txtTelefonoAlumno.setText(alumno.getTelefonoAlumno());
                    txtMailAlumno.setText(alumno.getMailAlumno());
                    txtIdCarrera.setText(String.valueOf(alumno.getIdCarrera()));
                    
                     String carreraEnComboBox = daoCarrera.obtenerItemComboBoxCarrera(alumno.getIdCarrera(), 
                             con.getConexion());

                    if (carreraEnComboBox != null) {
                        
                        comboBoxCarrera.setSelectedItem(carreraEnComboBox);
                    
                    } else {
                        
                        Utilidades.msg(this, "Se produjo un error al obtener la carrera, "
                                + "ingrese nuevamente");
                        this.dispose();
                        
                    }
                    
                    
                } else {
                    
                    Utilidades.msg(this, "No existe el Alumno o se produjo un error");
                    comboBoxCarrera.setSelectedIndex(0);
                    txtIdCarrera.setText("");
                    
                    btnAgregar.setEnabled(true);
                    btnCancelar.setEnabled(true);
                    btnBuscar.setEnabled(true);
                    
                    btnEliminar.setEnabled(false);
                    btnModificar.setEnabled(false);
                    
                }
                
            } else {
                
                Utilidades.msg(this, "Debe ingresar un Nº entero mayor a 0");
                comboBoxCarrera.setSelectedIndex(0);
                txtIdCarrera.setText("");
                btnAgregar.setEnabled(true);
                btnCancelar.setEnabled(true);
                btnBuscar.setEnabled(true);

                btnEliminar.setEnabled(false);
                btnModificar.setEnabled(false);
                
            }
          
        } catch (NumberFormatException e) {
            
            Utilidades.msg(this, "Se produjo un error, ingrese nuevamente");
            this.dispose();
        
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexión, ingrese nuevamente");
                this.dispose();
                
            }
            
        }
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void comboBoxCarreraItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCarreraItemStateChanged
        
        Conexion con = new Conexion();
        
        txtIdCarrera.setText("");
        
        try {
                       
            String carrera = comboBoxCarrera.getSelectedItem() != null ? comboBoxCarrera.getSelectedItem().toString() : null;
            
            if (carrera == null || carrera.equals("--")) {
                
                txtIdCarrera.setText("");
                
            } else {
                
               Integer idCarreraSeleccionada = daoCarrera.obtenerIdCarreraSeleccionada(carrera, con.getConexion());
            
               if (idCarreraSeleccionada != null) {
                   txtIdCarrera.setText(String.valueOf(idCarreraSeleccionada));  
               } else {
                   txtIdCarrera.setText("");
                   
                   if (modeloComboBoxCarrera.getSize() > 0) {
                       comboBoxCarrera.setSelectedIndex(0);
                   }
                   
               }          
                
            }
           
        } catch (Exception e) {
            
            Utilidades.msg(this, "Se produjo un error en la selección del combo, ingrese nuevamente");
            this.dispose();
            
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexión, ingrese nuevamente");
                this.dispose();
                
            }
            
        }
      
    }//GEN-LAST:event_comboBoxCarreraItemStateChanged

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        
        Conexion con = new Conexion();
        
        try {
            
            if (txtDNI.getText().equals("")) {
                Utilidades.msg(this, "El DNI no puede estar vacío");
                txtDNI.requestFocus();
                return;
            }
        
            if (txtNombreAlumno.getText().equals("")) {
                Utilidades.msg(this, "El Nombre no puede estar vacío");
                txtNombreAlumno.requestFocus();
                return;
            }
        
            if (txtApellidoAlumno.getText().equals("")) {
                Utilidades.msg(this, "El Apellido no puede estar vacío");
                txtApellidoAlumno.requestFocus();
                return;
            }
        
            if (comboBoxCarrera.getSelectedItem().equals("--") || txtIdCarrera.getText().equals("")) {
                Utilidades.msg(this, "Debe elegir una Carrera para el Alumno");
                comboBoxCarrera.requestFocus();
                return;
            }
        
            if (!Utilidades.isNumInt(txtDNI.getText())) {
                Utilidades.msg(this, "DNI incorrecto");
                txtDNI.setText("");
                txtDNI.requestFocus();
                return;
            }
            
            if (Utilidades.isNumInt(txtDNI.getText()) && !(Integer.parseInt(txtDNI.getText()) > 0)) {
                Utilidades.msg(this, "DNI incorrecto, debe ser mayor a 0");
                txtDNI.setText("");
                txtDNI.requestFocus();
                return;                
            }
            
            if (Utilidades.existe(con.getConexion(), "SELECT (1) FROM ALUMNO WHERE DNI = " + Integer.valueOf(txtDNI.getText()))) {
                
                Utilidades.msg(this, "No se puede ingresar porque el DNI ya existe");
                
            } else {
                
                Alumno alumno = new Alumno(
                        Integer.valueOf(txtDNI.getText()), 
                        txtNombreAlumno.getText(), 
                        txtApellidoAlumno.getText(), 
                        txtTelefonoAlumno.getText(), 
                        txtMailAlumno.getText(),
                        Integer.valueOf(txtIdCarrera.getText()));
                
                daoAlumno.ingresarAlumno(alumno, con.getConexion());
                
                Utilidades.msg(this, "Alumno ingresado correctamente");
                
                txtDNI.setText("");
                txtNombreAlumno.setText("");
                txtApellidoAlumno.setText("");
                txtTelefonoAlumno.setText("");
                txtMailAlumno.setText("");
                
                if (modeloComboBoxCarrera.getSize() > 0) {
                    comboBoxCarrera.setSelectedIndex(0);
                }
                                
                txtIdCarrera.setText("");
                
                btnAgregar.setEnabled(true);
                btnCancelar.setEnabled(true);
                btnBuscar.setEnabled(true);

                btnEliminar.setEnabled(false);
                btnModificar.setEnabled(false);
                
            }
            
        } catch (NumberFormatException | SQLException e) {
            
            Utilidades.msg(this, "Error al ingresar el Alumno, ingrese nuevamente");
            this.dispose();
        
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexión, ingrese nuevamente");
                this.dispose();
                
            }
            
        }
        
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        
        Conexion con = new Conexion();
        
        try {
            
            txtDNI.setEditable(false);
        
            if (txtNombreAlumno.getText().equals("")) {
                Utilidades.msg(this, "El Nombre no puede estar vacío");
                txtNombreAlumno.requestFocus();
                return;
            }
        
            if (txtApellidoAlumno.getText().equals("")) {
                Utilidades.msg(this, "El Apellido no puede estar vacío");
                txtApellidoAlumno.requestFocus();
                return;
            }
        
            if (comboBoxCarrera.getSelectedItem().toString().equals("--") || txtIdCarrera.getText().equals("")) {
                Utilidades.msg(this, "Debe elegir una Carrera para el Alumno");
                comboBoxCarrera.requestFocus();
                return;
            }
                       
            Alumno alumno = new Alumno(
                        Integer.valueOf(txtDNI.getText()), 
                        txtNombreAlumno.getText(), 
                        txtApellidoAlumno.getText(), 
                        txtTelefonoAlumno.getText(), 
                        txtMailAlumno.getText(),
                        Integer.valueOf(txtIdCarrera.getText()));
            
            daoAlumno.actualizaAlumno(alumno, con.getConexion());
                
            Utilidades.msg(this, "Se actualizaron los datos correctamente");
            
            txtDNI.setText("");
            txtNombreAlumno.setText("");
            txtApellidoAlumno.setText("");
            txtTelefonoAlumno.setText("");
            txtMailAlumno.setText("");
            
            if (modeloComboBoxCarrera.getSize() > 0) {
                comboBoxCarrera.setSelectedIndex(0);
            }
                        
            txtIdCarrera.setText("");
            
            txtDNI.setEditable(true);
                
            btnAgregar.setEnabled(true);
            btnCancelar.setEnabled(true);
            btnBuscar.setEnabled(true);

            btnEliminar.setEnabled(false);
            btnModificar.setEnabled(false);
                       
        } catch (NumberFormatException | SQLException e) {

            Utilidades.msg(this, "Error: no se pudo actualizar el Alumno, ingrese nuevamente");
            this.dispose();

        } finally {
           
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexión, ingrese nuevamente");
                this.dispose();
                
            }
            
        }
        
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        
        txtDNI.setText("");
        txtDNI.setEditable(true);
        txtNombreAlumno.setText("");
        txtApellidoAlumno.setText("");
        txtTelefonoAlumno.setText("");
        txtMailAlumno.setText("");
        
        if (modeloComboBoxCarrera.getSize() > 0) {
            comboBoxCarrera.setSelectedIndex(0);
        }
        
        btnAgregar.setEnabled(true);
        btnCancelar.setEnabled(true);
        btnBuscar.setEnabled(true);

        btnEliminar.setEnabled(false);
        btnModificar.setEnabled(false);
       
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        Conexion con = new Conexion();
        
        try {
            
            daoAlumno.eliminarAlumno(Integer.valueOf(txtDNI.getText()), con.getConexion());
            
            Utilidades.msg(this, "Se eliminó el Alumno correctamente");
            
            txtDNI.setText("");
            txtNombreAlumno.setText("");
            txtApellidoAlumno.setText("");
            txtTelefonoAlumno.setText("");
            txtMailAlumno.setText("");
            
            if (modeloComboBoxCarrera.getSize() > 0) {
                comboBoxCarrera.setSelectedIndex(0);
            }
            
            txtIdCarrera.setText("");
        
            btnAgregar.setEnabled(true);
            btnCancelar.setEnabled(true);
            btnBuscar.setEnabled(true);

            btnEliminar.setEnabled(false);
            btnModificar.setEnabled(false);
            
        } catch (NumberFormatException | SQLException e) {
            
            Utilidades.msg(this, "Error: no se pudo eliminar el Alumno, ingrese nuevamente");
            this.dispose();
            
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexión, ingrese nuevamente");
                this.dispose();
                
            }
            
        }
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmABMalumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmABMalumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmABMalumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmABMalumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmABMalumno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> comboBoxCarrera;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblCarrera;
    private javax.swing.JLabel lblDNI;
    private javax.swing.JLabel lblMail;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JTextField txtApellidoAlumno;
    private javax.swing.JTextField txtDNI;
    private javax.swing.JTextField txtIdCarrera;
    private javax.swing.JTextField txtMailAlumno;
    private javax.swing.JTextField txtNombreAlumno;
    private javax.swing.JTextField txtTelefonoAlumno;
    // End of variables declaration//GEN-END:variables
}
