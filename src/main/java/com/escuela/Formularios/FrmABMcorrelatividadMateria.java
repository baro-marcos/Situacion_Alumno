/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.escuela.Formularios;

import com.escuela.DAOs.DaoCarrera;
import com.escuela.DAOs.DaoCorrelatividadMateria;
import com.escuela.DAOs.DaoMateria;
import com.escuela.Entidades.Materia;
import com.escuela.Entidades.MateriaCorrelatividad;
import com.escuela.Utilidades.Conexion;
import com.escuela.Utilidades.Utilidades;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcos Bar√≥
 */
public class FrmABMcorrelatividadMateria extends javax.swing.JFrame {
    
    DaoMateria daoMateria;
    DaoCarrera daoCarrera;
    DaoCorrelatividadMateria daoCorrelatividadMateria;
    
    DefaultComboBoxModel<String> modeloComboBoxCarrera = new DefaultComboBoxModel<>();
    DefaultComboBoxModel<String> modeloComboBoxMateria = new DefaultComboBoxModel<>();
    DefaultComboBoxModel<String> modeloComboBoxMateriaCorrelativa = new DefaultComboBoxModel<>();
    
    private DefaultTableModel modelCorrelativas = new DefaultTableModel();

    /**
     * Creates new form FrmABMcorrelatividadMateria
     */
    public FrmABMcorrelatividadMateria() {
        initComponents();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        comboBoxCarrera.setModel(modeloComboBoxCarrera);
        comboBoxMateria.setModel(modeloComboBoxMateria);
        comboBoxMateriaCorrelativa.setModel(modeloComboBoxMateriaCorrelativa);
        this.setResizable(false);
        crearModeloTabla();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCarrera = new javax.swing.JLabel();
        comboBoxCarrera = new javax.swing.JComboBox<>();
        lblMateria = new javax.swing.JLabel();
        comboBoxMateria = new javax.swing.JComboBox<>();
        txtIdCarrera = new javax.swing.JTextField();
        txtIdMateria = new javax.swing.JTextField();
        lblMateriaCorrelativa = new javax.swing.JLabel();
        comboBoxMateriaCorrelativa = new javax.swing.JComboBox<>();
        txtIdMateriaCorrelativa = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        lblTablaCorrelativas = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCorrelativas = new javax.swing.JTable();
        txtIdMateriaCorrelatividad = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ABM - Correlatividad Materia");

        lblCarrera.setText("Carrera:");

        comboBoxCarrera.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxCarreraItemStateChanged(evt);
            }
        });

        lblMateria.setText("Materia:");

        comboBoxMateria.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMateriaItemStateChanged(evt);
            }
        });

        lblMateriaCorrelativa.setText("Materia correlativa:");

        comboBoxMateriaCorrelativa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxMateriaCorrelativaItemStateChanged(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        lblTablaCorrelativas.setText("Materias y sus correlativas");

        jTableCorrelativas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableCorrelativas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableCorrelativasMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCorrelativas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTablaCorrelativas, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIdMateriaCorrelatividad, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminar)
                        .addGap(191, 191, 191)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblMateria, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addComponent(lblCarrera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblMateriaCorrelativa, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAgregar)
                                .addGap(202, 202, 202)
                                .addComponent(btnCancelar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtIdMateriaCorrelativa, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtIdCarrera, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtIdMateria, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxCarrera, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxMateria, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(comboBoxMateriaCorrelativa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarrera)
                    .addComponent(comboBoxCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(txtIdCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMateria)
                    .addComponent(comboBoxMateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIdMateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMateriaCorrelativa)
                    .addComponent(comboBoxMateriaCorrelativa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdMateriaCorrelativa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar)
                    .addComponent(btnAgregar))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(lblTablaCorrelativas))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIdMateriaCorrelatividad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnEliminar))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed

        Conexion con = new Conexion();

        try {
            
            if (comboBoxCarrera.getSelectedItem().toString().equals("--") || txtIdCarrera.getText().equals("")) {
                Utilidades.msg(this, "Debe elegir una Carrera");
                comboBoxCarrera.requestFocus();
                return;
            }
            
            if (comboBoxMateria.getSelectedItem().toString().equals("--") || txtIdMateria.getText().equals("")) {
                Utilidades.msg(this, "Debe elegir una Materia");
                comboBoxMateria.requestFocus();
                return;
            }
            
            if (comboBoxMateriaCorrelativa.getSelectedItem().toString().equals("--") || txtIdMateriaCorrelativa.getText().equals("")) {
                Utilidades.msg(this, "Debe elegir una Materia correlativa");
                comboBoxMateriaCorrelativa.requestFocus();
                return;
            }

            if (Utilidades.existe(con.getConexion(), "SELECT (1) FROM MATERIA_CORRELATIVIDAD WHERE ID_CARRERA = " 
                    + Integer.valueOf(txtIdCarrera.getText()) 
                    + " AND ID_MATERIA = " + Integer.valueOf(txtIdMateria.getText()) 
                    + " AND ID_MATERIA_CORRELATIVA = " + Integer.valueOf(txtIdMateriaCorrelativa.getText()))) {

                Utilidades.msg(this, "No se puede ingresar porque ya existe");

            } else {

                MateriaCorrelatividad materiaCorrelatividad = new MateriaCorrelatividad(
                    Integer.valueOf(txtIdCarrera.getText()),
                    Integer.valueOf(txtIdMateria.getText()),
                    Integer.valueOf(txtIdMateriaCorrelativa.getText())
                );

                daoCorrelatividadMateria.ingresarCorrelativa(materiaCorrelatividad, con.getConexion());

                Utilidades.msg(this, "Correlatividad ingresada correctamente");
               
                if (modeloComboBoxMateria.getSize() > 0) {
                    comboBoxMateria.setSelectedIndex(0);
                }
                                
                txtIdMateria.setText("");
                
                if (modeloComboBoxMateriaCorrelativa.getSize() > 0) {
                    comboBoxMateriaCorrelativa.setSelectedIndex(0);
                }
                
                txtIdMateriaCorrelativa.setText("");
                
                txtIdMateriaCorrelatividad.setText("");
                
                btnEliminar.setEnabled(false);
                
                limpiarTabla();
                llenarTabla(con.getConexion());
          
            }

        } catch (NumberFormatException | SQLException e) {

            Utilidades.msg(this, "Error al ingresar la correlatividad, ingrese nuevamente");
            this.dispose();

        } finally {

            try {

                con.cerrarConexion();

            } catch (SQLException ex) {

                Utilidades.msg(this, "Se produjo un error al cerrar la conexi√≥n, ingrese nuevamente");
                this.dispose();

            }

        }

    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        Conexion con = new Conexion();

        try {
            
            if (txtIdMateriaCorrelatividad.getText().equals("")) {
                Utilidades.msg(this, "Ocurri√≥ un error, seleccione nuevamente la Correlativa a borrar de la tabla");
                return;
            }
            
            daoCorrelatividadMateria.eliminarCorrelatividad(Integer.valueOf(txtIdMateriaCorrelatividad.getText()),
                    con.getConexion());

            Utilidades.msg(this, "Se elimin√≥ la correlatividad correctamente");
                
            if (modeloComboBoxMateria.getSize() > 0) {
                comboBoxMateria.setSelectedIndex(0);
            }
            txtIdMateria.setText("");
            
            if (modeloComboBoxMateriaCorrelativa.getSize() > 0) {
                comboBoxMateriaCorrelativa.setSelectedIndex(0);
            }
            
            txtIdMateriaCorrelativa.setText("");
            
            txtIdMateriaCorrelatividad.setText("");
                
            btnAgregar.setEnabled(true);
            btnEliminar.setEnabled(false);
            
            limpiarTabla();
            llenarTabla(con.getConexion());
           
        } catch (NumberFormatException | SQLException e) {

            Utilidades.msg(this, "Error: no se pudo eliminar la correlatividad, ingrese nuevamente");
            this.dispose();

        } finally {

            try {

                con.cerrarConexion();

            } catch (SQLException ex) {

                Utilidades.msg(this, "Se produjo un error al cerrar la conexi√≥n, ingrese nuevamente");
                this.dispose();

            }

        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed

        if (modeloComboBoxCarrera.getSize() > 0) {
            comboBoxCarrera.setSelectedIndex(0);
        }
        
        txtIdCarrera.setText("");
        
        
        if (modeloComboBoxMateria.getSize() > 0) {
            comboBoxMateria.setSelectedIndex(0);
        }
                
        txtIdMateria.setText("");
        
        if (modeloComboBoxMateriaCorrelativa.getSize() > 0) {
            comboBoxMateriaCorrelativa.setSelectedIndex(0);
        }
        
        txtIdMateriaCorrelativa.setText("");
        
        txtIdMateriaCorrelatividad.setText("");
        
        btnAgregar.setEnabled(true);
        btnEliminar.setEnabled(false);
                       
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void comboBoxCarreraItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxCarreraItemStateChanged
        
       Conexion con = new Conexion();
        
        txtIdCarrera.setText("");
        txtIdMateria.setText("");
        txtIdMateriaCorrelativa.setText("");
        
        try {
            
            String carrera = comboBoxCarrera.getSelectedItem() != null ? comboBoxCarrera.getSelectedItem().toString() : null;
            
            if (carrera == null || carrera.equals("--")) {
                
                txtIdCarrera.setText("");
                
                if (modeloComboBoxMateria.getSize() > 0) {
                    comboBoxMateria.setSelectedIndex(0);
                }
                comboBoxMateria.setEnabled(false);
                txtIdMateria.setText("");
                
                if (modeloComboBoxMateriaCorrelativa.getSize() > 0) {
                    comboBoxMateriaCorrelativa.setSelectedIndex(0);
                }
                
                comboBoxMateriaCorrelativa.setEnabled(false);
                txtIdMateriaCorrelativa.setText("");
                
            } else {
                
               Integer idCarreraSeleccionada = daoCarrera.obtenerIdCarreraSeleccionada(carrera, con.getConexion());
            
               if (idCarreraSeleccionada != null) {
                   
                   txtIdCarrera.setText(String.valueOf(idCarreraSeleccionada));
                   
                   daoMateria.llenarComboBoxMateriasCarrera(modeloComboBoxMateria, idCarreraSeleccionada, con.getConexion());
                   
                   if (modeloComboBoxMateria.getSize() > 0) {
                        comboBoxMateria.setSelectedIndex(0);
                   }  
                   
                   txtIdMateria.setText("");
                   comboBoxMateria.setEnabled(true);
                   
                   daoMateria.llenarComboBoxMateriasCarrera(modeloComboBoxMateriaCorrelativa, idCarreraSeleccionada, con.getConexion());
                   
                   if (modeloComboBoxMateriaCorrelativa.getSize() > 0) {
                        comboBoxMateriaCorrelativa.setSelectedIndex(0);
                   }
                   
                   txtIdMateriaCorrelativa.setText("");
                   comboBoxMateriaCorrelativa.setEnabled(true);
                   
                   
               } else {
                   
                    txtIdCarrera.setText("");
                    
                    if (modeloComboBoxCarrera.getSize() > 0) {
                        comboBoxCarrera.setSelectedIndex(0);
                    }
                                                                        
                    
                    if (modeloComboBoxMateria.getSize() > 0) {
                        comboBoxMateria.setSelectedIndex(0);
                    }
                                        
                    comboBoxMateria.setEnabled(false);
                    txtIdMateria.setText("");
                                    
                    if (modeloComboBoxMateriaCorrelativa.getSize() > 0) {
                        comboBoxMateriaCorrelativa.setSelectedIndex(0);
                    }
                    
                    comboBoxMateriaCorrelativa.setEnabled(false);
                    txtIdMateriaCorrelativa.setText("");
                   
               }          
                
            }
           
        } catch (SQLException e) {
            
            Utilidades.msg(this, "Se produjo un error en la selecci√≥n del combo, ingrese nuevamente");
            this.dispose();
            
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexi√≥n, ingrese nuevamente");
                this.dispose();
                
            }
            
        } 
        
    }//GEN-LAST:event_comboBoxCarreraItemStateChanged

    private void comboBoxMateriaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMateriaItemStateChanged
        
        Conexion con = new Conexion();
        
        txtIdMateria.setText("");
                       
        try {
            
            String materia = comboBoxMateria.getSelectedItem() != null ? comboBoxMateria.getSelectedItem().toString() : null;
            
            if (materia == null || materia.equals("--")) {
                
                txtIdMateria.setText("");
                                                                
            } else {
                
               Materia materiaSeleccionada = daoMateria.obtenerDatosMateria(materia, con.getConexion());
            
               if (materiaSeleccionada != null) {
                   
                   txtIdMateria.setText(String.valueOf(materiaSeleccionada.getIdMateria()));
                                      
               } else {
                   
                   if (modeloComboBoxMateria.getSize() > 0) {
                        comboBoxMateria.setSelectedIndex(0);
                    }
                   
                   txtIdMateria.setText("");
                                      
               }          
                
            }
           
        } catch (Exception e) {
            
            Utilidades.msg(this, "Se produjo un error en la selecci√≥n del combo, ingrese nuevamente");
            this.dispose();
            
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexi√≥n, ingrese nuevamente");
                this.dispose();
                
            }
            
        }
        
    }//GEN-LAST:event_comboBoxMateriaItemStateChanged

    private void comboBoxMateriaCorrelativaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxMateriaCorrelativaItemStateChanged
        
        Conexion con = new Conexion();
        
        txtIdMateriaCorrelativa.setText("");
                
        try {
            
            String materia = comboBoxMateriaCorrelativa.getSelectedItem() != null ? comboBoxMateriaCorrelativa.getSelectedItem().toString() : null;
            
            if (materia == null || materia.equals("--")) {
                
                txtIdMateriaCorrelativa.setText("");
                                                
            } else {
                
               Materia materiaSeleccionada = daoMateria.obtenerDatosMateria(materia, con.getConexion());
            
               if (materiaSeleccionada != null) {
                   
                   txtIdMateriaCorrelativa.setText(String.valueOf(materiaSeleccionada.getIdMateria()));
                                      
               } else {
                   
                   if (modeloComboBoxMateriaCorrelativa.getSize() > 0) {
                        comboBoxMateriaCorrelativa.setSelectedIndex(0);
                    }
                   
                   txtIdMateriaCorrelativa.setText("");
                                      
               }          
                
            }
           
        } catch (Exception e) {
            
            Utilidades.msg(this, "Se produjo un error en la selecci√≥n del combo, ingrese nuevamente");
            this.dispose();
            
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexi√≥n, ingrese nuevamente");
                this.dispose();
                
            }
            
        }
        
    }//GEN-LAST:event_comboBoxMateriaCorrelativaItemStateChanged

    private void jTableCorrelativasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCorrelativasMousePressed
        
        txtIdMateriaCorrelatividad.setText("");
        seleccionarCorrelativa();
        btnAgregar.setEnabled(false);
        btnEliminar.setEnabled(true);
        
    }//GEN-LAST:event_jTableCorrelativasMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmABMcorrelatividadMateria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmABMcorrelatividadMateria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmABMcorrelatividadMateria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmABMcorrelatividadMateria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmABMcorrelatividadMateria().setVisible(true);
            }
        });
    }
    
    private void crearModeloTabla() {
        modelCorrelativas = (new DefaultTableModel(null,
                //T√≠tulos    
                new String[]{"Carrera", "Materia", "Correlativa", "ID"}) {

            //Celdas editables
            boolean[] canEdit = new boolean[]{false, false, false, false};

            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return canEdit[colIndex];
            }

        });
    }
    
    private void limpiarTabla() {
        for (int i = 0; i < jTableCorrelativas.getRowCount(); i++) {
            modelCorrelativas.removeRow(i);
            i -= 1;
        }
    }
    
    private void seleccionarCorrelativa() {
        
        if (jTableCorrelativas.getSelectedRow() != -1) {
            txtIdMateriaCorrelatividad.setText(jTableCorrelativas.getValueAt(jTableCorrelativas.getSelectedRow(), 3).toString());
        }
        
    }
    
    private void llenarTabla(Connection con) throws SQLException {
        
        String consulta = " SELECT C.NOMBRE AS CARRERA, M.NOMBRE AS MATERIA, MC.NOMBRE AS MAT_COR, MCOR.ID_CORRELATIVIDAD_MATERIA "
                + " FROM MATERIA_CORRELATIVIDAD MCOR "
                + " INNER JOIN CARRERA C ON (C.ID_CARRERA = MCOR.ID_CARRERA) "
                + " INNER JOIN MATERIA M ON (M.ID_MATERIA = MCOR.ID_MATERIA)"
                + " INNER JOIN MATERIA MC ON (MC.ID_MATERIA = MCOR.ID_MATERIA_CORRELATIVA) "
                + " ORDER BY C.NOMBRE, M.NOMBRE ";
        
        int nroColumnas = 4;
        
        Statement st = null;
        ResultSet rs = null;
        
        try {
            
            st = con.createStatement();
            rs = st.executeQuery(consulta);

            while (rs.next()) {
                // Se crea un array que ser√° una de las filas de la tabla
                Object[] fila = new Object[nroColumnas];
                // Se rellena cada posici√≥n del array con una de las columnas de la tabla en base de datos
                for (int i = 0; i < nroColumnas; i++) {
                    fila[i] = rs.getObject(i + 1); // El primer indice en rs es el 1, no el cero, por eso se suma 1
                }
                // Se a√±ade al modelo la fila completa.
                modelCorrelativas.addRow(fila);
            }

           
        } finally {

            if (rs != null) {

                rs.close();

            }

            if (st != null) {

                st.close();

            }

        }
        
    }
    
    private void inicializar() {
        
        Conexion con = new Conexion();
        
        daoMateria = new DaoMateria();
        daoCarrera = new DaoCarrera();
        daoCorrelatividadMateria = new DaoCorrelatividadMateria();
        
        try {
            
            daoCarrera.llenarComboBoxCarrera(modeloComboBoxCarrera, con.getConexion());
            
            if (modeloComboBoxCarrera.getSize() > 0) {
                comboBoxCarrera.setSelectedIndex(0);
            }
            
            txtIdCarrera.setText("");
            txtIdCarrera.setEditable(false);
            txtIdCarrera.setVisible(false);
            
            daoMateria.llenarComboBoxMateriaIni(modeloComboBoxMateria, con.getConexion());
            
            if (modeloComboBoxMateria.getSize() > 0) {
                comboBoxMateria.setSelectedIndex(0);
            }
            
            txtIdMateria.setText("");
            txtIdMateria.setEditable(false);
            txtIdMateria.setVisible(false);
            comboBoxMateria.setEnabled(false);
            
            daoMateria.llenarComboBoxMateriaIni(modeloComboBoxMateriaCorrelativa, con.getConexion());
            
            if (modeloComboBoxMateriaCorrelativa.getSize() > 0) {
                comboBoxMateriaCorrelativa.setSelectedIndex(0);
            }
            
            txtIdMateriaCorrelativa.setText("");
            txtIdMateriaCorrelativa.setEditable(false);
            txtIdMateriaCorrelativa.setVisible(false);
            comboBoxMateriaCorrelativa.setEnabled(false);
            
            txtIdMateriaCorrelatividad.setText("");
            txtIdMateriaCorrelatividad.setEditable(false);
            txtIdMateriaCorrelatividad.setVisible(false);
            
            btnEliminar.setEnabled(false);
                      
            jTableCorrelativas.setModel(modelCorrelativas);
            jTableCorrelativas.getTableHeader().setReorderingAllowed(false);
            llenarTabla(con.getConexion());
                                                   
        } catch (SQLException ex) {
            
            Utilidades.msg(this, "Se produjo un error al inicializar la ventana, ingrese nuevamente");
            this.dispose();
            
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexi√≥n, ingrese nuevamente");
                this.dispose();
                
            }
            
        }
           
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> comboBoxCarrera;
    private javax.swing.JComboBox<String> comboBoxMateria;
    private javax.swing.JComboBox<String> comboBoxMateriaCorrelativa;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCorrelativas;
    private javax.swing.JLabel lblCarrera;
    private javax.swing.JLabel lblMateria;
    private javax.swing.JLabel lblMateriaCorrelativa;
    private javax.swing.JLabel lblTablaCorrelativas;
    private javax.swing.JTextField txtIdCarrera;
    private javax.swing.JTextField txtIdMateria;
    private javax.swing.JTextField txtIdMateriaCorrelativa;
    private javax.swing.JTextField txtIdMateriaCorrelatividad;
    // End of variables declaration//GEN-END:variables
}
