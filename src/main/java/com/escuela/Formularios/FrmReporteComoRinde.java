/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.escuela.Formularios;

import com.escuela.DAOs.DaoCorrelatividadMateria;
import com.escuela.DAOs.DaoMateria;
import com.escuela.DTOs.DTOcondicionAlumnoMateria;
import com.escuela.Utilidades.Conexion;
import com.escuela.Utilidades.Utilidades;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcos Baró
 */
public class FrmReporteComoRinde extends javax.swing.JDialog {
    
    DaoCorrelatividadMateria daoCorrelatividadMateria;
    DaoMateria daoMateria;
       
    private Integer idCarrera;
    private Integer DNIalumno;
    private Integer idMateria;
              
    private DefaultTableModel modelReporte = new DefaultTableModel();

    /**
     * Creates new form FrmReporte
     */
    public FrmReporteComoRinde(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
    }
    
    public FrmReporteComoRinde(Integer idCarrera, Integer DNIalumno, Integer idMateria) {
        
        initComponents();
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.idCarrera = idCarrera;
        this.DNIalumno = DNIalumno;
        this.idMateria = idMateria;
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        crearModeloTabla();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelReporte = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReporte = new javax.swing.JTable();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporte Alumno");

        panelReporte.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Reporte"));

        tblReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblReporte);

        javax.swing.GroupLayout panelReporteLayout = new javax.swing.GroupLayout(panelReporte);
        panelReporte.setLayout(panelReporteLayout);
        panelReporteLayout.setHorizontalGroup(
            panelReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReporteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1005, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelReporteLayout.setVerticalGroup(
            panelReporteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReporteLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelReporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(panelReporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmReporteComoRinde.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmReporteComoRinde.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmReporteComoRinde.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmReporteComoRinde.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmReporteComoRinde dialog = new FrmReporteComoRinde(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void inicializar() {
        
        Conexion con = new Conexion();
        
        try {
            
            daoCorrelatividadMateria = new DaoCorrelatividadMateria();
            daoMateria = new DaoMateria();
            tblReporte.setModel(modelReporte);
            tblReporte.getTableHeader().setReorderingAllowed(false);
            
            llenarTabla(con.getConexion()); 
            
        } catch (Exception ex) {
            
            Utilidades.msg(this, "Se produjo un error al inicializar la ventana, ingrese nuevamente");
            this.dispose();
            
        } finally {
            
            try {
                
                con.cerrarConexion();  
               
            } catch (SQLException ex) {
                
                Utilidades.msg(this, "Se produjo un error al cerrar la conexión, ingrese nuevamente");
                this.dispose();
                
            }
            
        }       
     
    }
    
    private void crearModeloTabla() {
        
        modelReporte = (new DefaultTableModel(null,
                //Títulos    
                new String[]{"Alumno", "DNI", "Carrera", "Materia a rendir final", "Tipo", "Rinde como"}) {

            //Celdas editables
            boolean[] canEdit = new boolean[]{false, false, false, false, false, false};

            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return canEdit[colIndex];
            }

        });
    }
    
    private void llenarTabla(Connection con) {
        
        boolean puedeRendirFinal = false;
        int nroColumnas = 6;
        
        try {

            DTOcondicionAlumnoMateria materiaArendirYsuEstado = daoMateria.obtenerDatosMateriaArendir(con, idCarrera, 
                idMateria, DNIalumno);
        
            List<DTOcondicionAlumnoMateria> correlativasYsusEstados = daoCorrelatividadMateria.obtenerMateriasCorrelativas(con, 
                idCarrera, idMateria, DNIalumno);
            
            Object[] fila = new Object[nroColumnas]; // Crear una fila de N columnas
        
            if (correlativasYsusEstados != null && materiaArendirYsuEstado != null) {
            
                puedeRendirFinal = evaluarCorrelativas(correlativasYsusEstados);
            
                if (puedeRendirFinal) {
                                   
                    fila[0] = materiaArendirYsuEstado.getApellidoNombre();
                    fila[1] = materiaArendirYsuEstado.getDniAlumno();
                    fila[2] = materiaArendirYsuEstado.getNombreCarrera();
                    fila[3] = materiaArendirYsuEstado.getNombreMateria();
                    fila[4] = materiaArendirYsuEstado.getTipoMateria();
                    fila[5] = materiaArendirYsuEstado.getSituacionAlumnoMateria();
                    
                    modelReporte.addRow(fila); // Añadir la fila al modelo

                } else {
                    
                    fila[0] = "No puede rendirla, debido a que no cumple con la/s correlativa/s";
                
                    modelReporte.addRow(fila); // Añadir la fila al modelo
                    
                }
                
            } else {
                                
                fila[0] = "No puede rendirla, debido a que no tiene cargadas las condiciones de las materias, tanto "
                        + "la que desea rendir como sus correlativas, verificar";
                
                modelReporte.addRow(fila); // Añadir la fila al modelo
                
            }
          
        } catch (Exception ex) {
            
            Utilidades.msg(this, "ERROR al llenar la Tabla, ingrese nuevamente");
            this.dispose();
            
        } 
        
    }
    
    private boolean evaluarCorrelativas(List<DTOcondicionAlumnoMateria> correlativas) {
        
        boolean rinde = true;
        
        //Ordenamos la lista para que las materias aprobadas vengan primero
        //Si m2 es "APROBADO" y m1 no lo es, el resultado sera un valor positivo (lo que significa que m2 debe aparecer antes que m1).
        //Si ambos tienen el mismo estado (ambos son "APROBADO" o ambos no lo son), el resultado sera 0, lo que indica que su orden relativo no cambia.
        //Si m1 es "APROBADO" y m2 no lo es, el resultado sera negativo (lo que significa que m1 debe aparecer antes que m2).
//        Collections.sort(correlativas, new Comparator<DTOcondicionAlumnoMateria>() {
//            
//        // Ordena en orden descendente
//        @Override
//        public int compare(DTOcondicionAlumnoMateria m1, DTOcondicionAlumnoMateria m2) {
//                return Boolean.compare(m2.getSituacionAlumnoMateria().equals("APROBADO"), m1.getSituacionAlumnoMateria().equals("APROBADO"));
//        }
//        });
        
        for (DTOcondicionAlumnoMateria correlativaMateria : correlativas) {
                
           if (!correlativaMateria.getSituacionAlumnoMateria().equals("APROBADO")) {
                rinde = false;
                return rinde;
            }
                
        }
        // Cumple con todas las correlativas
        
        return rinde; 
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelReporte;
    private javax.swing.JTable tblReporte;
    // End of variables declaration//GEN-END:variables
}
